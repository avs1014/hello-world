mlee222

// Copy your source code from in_lab file to here
// Expand the option list to include option 3 & 4 after 
// option 2. as following
// "3. Update Employee Salary"
// "4. Remove Employee"
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

// Define Number of Employees "SIZE" to be 2
#define SIZE 4		

// Declare Struct Employee 
struct Employee {
    int idNumber;
    int age;
    double salary;
}; // Word after Struct must start with Capital Letter

/* main program */
int main(void) 
{
	// Declare a struct Employee array "emp" with SIZE elements 
	// and initialize all elements to zero
	int option = 0;
    struct Employee emp[SIZE] = {{0,0,0.0}, {0,0,0.0}, {0,0,0.0}, {0,0,0.0}}; // 4 employees
    int i = 0; // variable that changes within array
    int j = 0; // for the scanf employees 
    int verify;
    int locateId;
    int relocateId;
	printf("---=== EMPLOYEE DATA ===---\n\n");

	do 
	{
		// Print the option list
		printf("1. Display Employee Information\n");
		printf("2. Add Employee\n");
		printf("3. Update Employee Salary\n");
		printf("4. Remove Employee\n");
		printf("0. Exit\n\n");
		printf("Please select from the above options: ");
		
		// Capture input to option variable
		scanf("%d",&option);
		printf("\n");
		
		switch (option) 
		{
		case 0:	// Exit the program
			
			break;

		case 1: // Display Employee Data
				// @IN-LAB

			printf("EMP ID  EMP AGE EMP SALARY\n");
			printf("======  ======= ==========\n");
            for (i=0; i < SIZE; i++) // allows to print following statement twice
            {
                if (emp[i].idNumber > 0){
                    printf("%6d%9d%11.2lf\n", emp[i].idNumber, emp[i].age, emp[i].salary);
                }
            }
            printf("\n");
			// Use "" formatting in a   
			// printf statement to display
			// employee id, age and salary of 
			// all  employees using a loop construct 
			
			// The loop construct will be run for SIZE times 
			// and will only display Employee data 
			// where the EmployeeID is > 0

			break;

		case 2:	// Adding Employee
				// @IN-LAB
				
			printf("Adding Employee\n");
			printf("===============\n");
            if (j < SIZE){ // Activates when j is less than SIZE; array index of 0, 1 only not 2

				for( i = 0 ; i < SIZE ; i ++){
					if(emp[i].idNumber == 0){
						printf("Enter Employee ID: ");
						scanf("%d", &emp[i].idNumber);
						printf("Enter Employee Age: ");
						scanf("%d", &emp[i].age);
						printf("Enter Employee Salary: ");
						scanf("%lf", &emp[i].salary);

						j = j + 1;

						break;
					}
				}
				
                
            } else {
                printf("ERROR!!! Maximum Number of Employees Reached\n");
            } 
            printf("\n");
			// Check for limits on the array and add employee 
			// data accordingly. 

			break;
        
        case 3: //Update Employee salary
        
            printf("Update Employee Salary\n");
            printf("======================\n");
			do
			{
				verify = 1;
				printf("Enter Employee ID: ");
				scanf("%d", &locateId);
				for (i = 0; i < j; i++)
				{
					if (emp[i].idNumber == locateId) break;
					else if (i == j - 1) 
					printf("*** ERROR: Employee ID not found! ***\n");
				}
				if (i != j) {
					printf("The current salary is %.2f\n", emp[i].salary);
					printf("Enter Employee New Salary: ");
					scanf("%lf", &emp[i].salary);
					verify = 0;
				printf("\n");
				}
			} while (verify);
			break;
			
        case 4: //Remove Employoee
        
            printf("Remove Employee\n");
            printf("===============\n");
			do
			{
				verify = 1;
				printf("Enter Employee ID: ");
				scanf("%d", &locateId);
				for (i = 0; i < j; i++)
				{
					if (emp[i].idNumber == locateId) break;
					else if (i == j - 1) printf("*** ERROR: Employee ID not found! ***\n");
				}
				if (i != j) {
					verify = 0;
					relocateId = i;
					printf("Employee %d will be removed\n\n", emp[relocateId].idNumber);
					// for (i = relocateId; i < j; i++)
					// {
					// 	if (i != j - 1) emp[i] = emp[i + 1];
					// 	else emp[i].idNumber = 0;
					// }
					emp[relocateId].idNumber = 0;
					emp[relocateId].age = 0 ;
					emp[relocateId].salary = 0 ;

					j -= 1;
				}
			} while (verify);
			break;
            
		default:
			printf("ERROR: Incorrect Option: Try Again\n\n");
		}

	} while (option != 0);
    printf("Exiting Employee Data Program. Good Bye!!!");
	return 0; 
}
